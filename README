Notice
> In this stage of the project, superior ways-of-doing-things might be
  found in the near future which can make the API unstable. The code
  also needs more real-world- and unit-tests, so do not use this for
  critical production software. Also, do not dynamically link with the
  expectation you can swap with a newer version. Please report any bugs
  when found.

This library only supports the bare minimum framework for keeping track
of an XMPP session. The `im.c` example shows how additional
functionality can be used in combination with the library. The example
is not a feature complete instant messenger.

Uses:
- Instant messenger for the paranoid.
- Iot.
- Easy integration of Iot device with existing XMPP software.
- Pub-Sub client for e.g. RSS.
- Integrating chat into a video game.

Goals:
- Run on embedded (support for ESP-IDF (ESP32) & (hopefully) pico-sdk (Raspberry Pi
  Pico [W])).
- Be portable to any OS. Empower any system to connect to XMPP networks.
- Support non-embedded (Desktop, etc.) too.
- Be compatible with the major XMPP servers (Prosody guaranteed).
- Don't allow unusual or malicious data sent from a server.
- Be very fast.
- Low amount of code while still being readable.
- Don't expect the programmer (consumer of this API) to be stupid.
- Extreme control of memory (when possible).
- Have the modern XMPP features available.

Non-goals:
- Implement the XMPP spec word-for-word.
- Have an extension/plugin system, for additional features you must
  patch the library.

XMPP Compliance:

RFC-6120 (Core): Partial.
RFC-7590 (TLS): Partial, full planned.
XEP-0368 (Direct TLS): Undecided.
XEP-0198 (Stream Management): Mostly.
- Location and (C->S) max attributes not supported.
XEP-0199 (XMPP Ping): Partial.
- Received ping's are returned unless disabled.

Dependencies:
- MbedTLS
- C99 compiler
- docker-compose (for testing)

Running the tests:
 $ make prosody
 $ make test

Run the im (instant messenger) example:
 $ make runim
