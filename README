Notice
> In this stage of the project, superior ways-of-doing-things might be
  found in the near future which can make the API unstable. The code
  also needs more real-world- and unit-tests, so do not use this for
  critical production software. Please report any bugs when found.

Uses:
- Instant messenger for the paranoid.
- Iot.
- Easy integration of Iot device with existing XMPP software.
- Pub-Sub client for e.g. RSS.
- Integrating chat into a video game.

Goals:
- Run on embedded (support for ESP-IDF (ESP32) & (hopefully) pico-sdk (Raspberry Pi
  Pico [W])).
- Support non-embedded (Desktop, etc.) too.
- Be compatible with the major XMPP servers (Prosody guaranteed).
- Don't allow unusual or malicious data sent from a server.
- Be very fast.
- Low amount of code while still being readable.
- Don't expect the programmer (consumer of this API) to be stupid.
- Extreme control of memory (when possible).
- Have the modern XMPP features available.

Non-goals:
- Implement the XMPP spec word-for-word.
- Have an extension/plugin system, for additional features you must
  patch the library.

XMPP Compliance:

RFC-6120 (Core): Partial.
RFC-7590 (TLS): Partial, full planned.
XEP-0368 (Direct TLS): Undecided.
XEP-0030 (Service Discovery): Partial, full not planned.
XEP-0115 (Entity Capabilities): Partial planned.
XEP-0163 (Personal Eventing Protocol): Undecided.
XEP-0245 (The /me Command): Full planned.
XEP-0084 (User Avatar): Undecided.
XEP-0054 (vcard-temp): Undecided.
XEP-0280 (Message Carbons): Full planned.
XEP-0191 (Blocking Command): Full planned.
XEP-0045 (Multi-User Chat): Planned.
XEP-0249 (Direct MUC Invitations): Full planned.
XEP-0198 (Stream Management): Partial, full planned.
XEP-0184 (Message Delivery Receipts): Full planned.
XEP-0363 (HTTP File Upload): Not planned.

Dependencies:
- MbedTLS
- C99 compiler
- docker-compose (for testing)

Running the tests:
 $ make prosody
 $ make test

Run the im (instant messenger) example:
 $ make runim
