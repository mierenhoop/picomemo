diff --git a/src/curve25519/ed25519/additions/compare.c b/src/curve25519/ed25519/additions/compare.c
index 8b1e313..9478032 100644
--- a/src/curve25519/ed25519/additions/compare.c
+++ b/src/curve25519/ed25519/additions/compare.c
@@ -40,5 +40,6 @@ int crypto_verify_32_ref(const unsigned char *x, const unsigned char *y)
   F(29)
   F(30)
   F(31)
+#undef F
   return (1 & ((differentbits - 1) >> 8)) - 1;
 }
diff --git a/src/curve25519/ed25519/additions/fe_mont_rhs.c b/src/curve25519/ed25519/additions/fe_mont_rhs.c
index bc83936..0f5c71a 100644
--- a/src/curve25519/ed25519/additions/fe_mont_rhs.c
+++ b/src/curve25519/ed25519/additions/fe_mont_rhs.c
@@ -1,6 +1,6 @@
 #include "fe.h"
 
-void fe_mont_rhs(fe v2, fe u) {
+void fe_mont_rhs(fe v2, const fe u) {
   fe A, one;
   fe u2, Au, inner;
 
diff --git a/src/curve25519/ed25519/additions/fe_sqrt.c b/src/curve25519/ed25519/additions/fe_sqrt.c
index a0c9785..664e143 100644
--- a/src/curve25519/ed25519/additions/fe_sqrt.c
+++ b/src/curve25519/ed25519/additions/fe_sqrt.c
@@ -1,4 +1,3 @@
-#include <assert.h>
 #include "fe.h"
 #include "crypto_additions.h"
 
@@ -15,25 +14,10 @@ static unsigned char i_bytes[32] = {
 void fe_sqrt(fe out, const fe a)
 {
   fe exp, b, b2, bi, i;
-#ifndef NDEBUG
-  fe legendre, zero, one;
-#endif
 
   fe_frombytes(i, i_bytes); 
   fe_pow22523(exp, a);             /* b = a^(q-5)/8        */
 
-  /* PRECONDITION: legendre symbol == 1 (square) or 0 (a == zero) */
-#ifndef NDEBUG
-  fe_sq(legendre, exp);            /* in^((q-5)/4) */ 
-  fe_sq(legendre, legendre);       /* in^((q-5)/2) */
-  fe_mul(legendre, legendre, a);   /* in^((q-3)/2) */
-  fe_mul(legendre, legendre, a);   /* in^((q-1)/2) */
-  
-  fe_0(zero);
-  fe_1(one);
-  assert(fe_isequal(legendre, zero) || fe_isequal(legendre, one));
-#endif
-
   fe_mul(b, a, exp);       /* b = a * a^(q-5)/8    */
   fe_sq(b2, b);            /* b^2 = a * a^(q-1)/4  */
 
@@ -42,10 +26,4 @@ void fe_sqrt(fe out, const fe a)
   fe_mul(bi, b, i);  
   fe_cmov(b, bi, 1 ^ fe_isequal(b2, a));
   fe_copy(out, b);
-
-  /* PRECONDITION: out^2 == a */ 
-#ifndef NDEBUG
-  fe_sq(b2, out);
-  assert(fe_isequal(a, b2));
-#endif
 }
diff --git a/src/curve25519/ed25519/additions/ge_montx_to_p3.c b/src/curve25519/ed25519/additions/ge_montx_to_p3.c
index 7a716c5..56a9dc0 100644
--- a/src/curve25519/ed25519/additions/ge_montx_to_p3.c
+++ b/src/curve25519/ed25519/additions/ge_montx_to_p3.c
@@ -1,6 +1,5 @@
 #include "fe.h"
 #include "ge.h"
-#include "assert.h"
 #include "crypto_additions.h"
 #include "utility.h"
 
@@ -39,32 +38,4 @@ void ge_montx_to_p3(ge_p3* p, const fe u, const unsigned char ed_sign_bit)
   fe_1(p->Z);
   fe_mul(p->T, p->X, p->Y);
 
- /* POSTCONDITION: check that p->X and p->Y satisfy the Ed curve equation */
- /* -x^2 + y^2 = 1 + dx^2y^2 */
-#ifndef NDEBUG
-  {
-  fe one, d, x2, y2, x2y2, dx2y2;
-
-  unsigned char dbytes[32] = {
-  0xa3, 0x78, 0x59, 0x13, 0xca, 0x4d, 0xeb, 0x75,
-  0xab, 0xd8, 0x41, 0x41, 0x4d, 0x0a, 0x70, 0x00,
-  0x98, 0xe8, 0x79, 0x77, 0x79, 0x40, 0xc7, 0x8c,
-  0x73, 0xfe, 0x6f, 0x2b, 0xee, 0x6c, 0x03, 0x52
-  };
-  
-  fe_frombytes(d, dbytes);
-  fe_1(one);
-  fe_sq(x2, p->X);                /* x^2 */
-  fe_sq(y2, p->Y);                /* y^2 */
-
-  fe_mul(dx2y2, x2, y2);           /* x^2y^2 */
-  fe_mul(dx2y2, dx2y2, d);         /* dx^2y^2 */
-  fe_add(dx2y2, dx2y2, one);       /* dx^2y^2 + 1 */
-
-  fe_neg(x2y2, x2);                /* -x^2 */
-  fe_add(x2y2, x2y2, y2);          /* -x^2 + y^2 */
-
-  assert(fe_isequal(x2y2, dx2y2));
-  }
-#endif
 }
diff --git a/src/curve25519/ed25519/additions/ge_scalarmult.c b/src/curve25519/ed25519/additions/ge_scalarmult.c
index e4f741b..8f633e3 100644
--- a/src/curve25519/ed25519/additions/ge_scalarmult.c
+++ b/src/curve25519/ed25519/additions/ge_scalarmult.c
@@ -2,25 +2,7 @@
 #include "ge.h"
 #include "crypto_additions.h"
 
-static unsigned char equal(signed char b,signed char c)
-{
-  unsigned char ub = b;
-  unsigned char uc = c;
-  unsigned char x = ub ^ uc; /* 0: yes; 1..255: no */
-  crypto_uint32 y = x; /* 0: yes; 1..255: no */
-  y -= 1; /* 4294967295: yes; 0..254: no */
-  y >>= 31; /* 1: yes; 0: no */
-  return y;
-}
-
-static unsigned char negative(signed char b)
-{
-  unsigned long long x = b; /* 18446744073709551361..18446744073709551615: yes; 0..255: no */
-  x >>= 63; /* 1: yes; 0: no */
-  return x;
-}
-
-static void cmov(ge_cached *t,const ge_cached *u,unsigned char b)
+static void cmov_cached(ge_cached *t,const ge_cached *u,unsigned char b)
 {
   fe_cmov(t->YplusX,u->YplusX,b);
   fe_cmov(t->YminusX,u->YminusX,b);
@@ -28,7 +10,7 @@ static void cmov(ge_cached *t,const ge_cached *u,unsigned char b)
   fe_cmov(t->T2d,u->T2d,b);
 }
 
-static void select(ge_cached *t,const ge_cached *pre, signed char b)
+static void select_cached(ge_cached *t,const ge_cached *pre, signed char b)
 {
   ge_cached minust;
   unsigned char bnegative = negative(b);
@@ -39,19 +21,19 @@ static void select(ge_cached *t,const ge_cached *pre, signed char b)
   fe_1(t->Z);
   fe_0(t->T2d);
 
-  cmov(t,pre+0,equal(babs,1));
-  cmov(t,pre+1,equal(babs,2));
-  cmov(t,pre+2,equal(babs,3));
-  cmov(t,pre+3,equal(babs,4));
-  cmov(t,pre+4,equal(babs,5));
-  cmov(t,pre+5,equal(babs,6));
-  cmov(t,pre+6,equal(babs,7));
-  cmov(t,pre+7,equal(babs,8));
+  cmov_cached(t,pre+0,equal(babs,1));
+  cmov_cached(t,pre+1,equal(babs,2));
+  cmov_cached(t,pre+2,equal(babs,3));
+  cmov_cached(t,pre+3,equal(babs,4));
+  cmov_cached(t,pre+4,equal(babs,5));
+  cmov_cached(t,pre+5,equal(babs,6));
+  cmov_cached(t,pre+6,equal(babs,7));
+  cmov_cached(t,pre+7,equal(babs,8));
   fe_copy(minust.YplusX,t->YminusX);
   fe_copy(minust.YminusX,t->YplusX);
   fe_copy(minust.Z,t->Z);
   fe_neg(minust.T2d,t->T2d);
-  cmov(t,&minust,bnegative);
+  cmov_cached(t,&minust,bnegative);
 }
 
 /*
@@ -124,7 +106,7 @@ void ge_scalarmult(ge_p3 *h, const unsigned char *a, const ge_p3 *A)
   ge_p3_0(h);
 
   for (i = 63;i > 0; i--) {
-    select(&t,pre,e[i]);
+    select_cached(&t,pre,e[i]);
     ge_add(&r, h, &t);
     ge_p1p1_to_p2(&s,&r);
 
@@ -134,7 +116,7 @@ void ge_scalarmult(ge_p3 *h, const unsigned char *a, const ge_p3 *A)
     ge_p2_dbl(&r,&s); ge_p1p1_to_p3(h,&r);
 
   }
-  select(&t,pre,e[0]);
+  select_cached(&t,pre,e[0]);
   ge_add(&r, h, &t);
   ge_p1p1_to_p3(h,&r);
 }
diff --git a/src/curve25519/ed25519/additions/generalized/gen_eddsa.c b/src/curve25519/ed25519/additions/generalized/gen_eddsa.c
index 9755d28..950de37 100644
--- a/src/curve25519/ed25519/additions/generalized/gen_eddsa.c
+++ b/src/curve25519/ed25519/additions/generalized/gen_eddsa.c
@@ -1,4 +1,4 @@
-#include <string.h>
+
 #include "gen_eddsa.h"
 #include "gen_labelset.h"
 #include "gen_constants.h"
diff --git a/src/curve25519/ed25519/additions/generalized/gen_labelset.c b/src/curve25519/ed25519/additions/generalized/gen_labelset.c
index b181cad..24d262b 100644
--- a/src/curve25519/ed25519/additions/generalized/gen_labelset.c
+++ b/src/curve25519/ed25519/additions/generalized/gen_labelset.c
@@ -1,5 +1,5 @@
-#include <stdlib.h>
-#include <string.h>
+
+
 #include "gen_labelset.h"
 #include "gen_constants.h"
 
diff --git a/src/curve25519/ed25519/additions/generalized/gen_veddsa.c b/src/curve25519/ed25519/additions/generalized/gen_veddsa.c
index 4e79b48..81672d1 100644
--- a/src/curve25519/ed25519/additions/generalized/gen_veddsa.c
+++ b/src/curve25519/ed25519/additions/generalized/gen_veddsa.c
@@ -1,4 +1,4 @@
-#include <string.h>
+
 #include "gen_eddsa.h"
 #include "gen_veddsa.h"
 #include "gen_constants.h"
diff --git a/src/curve25519/ed25519/additions/generalized/gen_x.c b/src/curve25519/ed25519/additions/generalized/gen_x.c
index d4df5c1..33a9989 100644
--- a/src/curve25519/ed25519/additions/generalized/gen_x.c
+++ b/src/curve25519/ed25519/additions/generalized/gen_x.c
@@ -1,4 +1,4 @@
-#include <string.h>
+
 #include "crypto_additions.h"
 #include "gen_x.h"
 #include "gen_constants.h"
diff --git a/src/curve25519/ed25519/additions/generalized/sc_isreduced.c b/src/curve25519/ed25519/additions/generalized/sc_isreduced.c
index 2419380..c569ceb 100644
--- a/src/curve25519/ed25519/additions/generalized/sc_isreduced.c
+++ b/src/curve25519/ed25519/additions/generalized/sc_isreduced.c
@@ -1,4 +1,4 @@
-#include <string.h>
+
 #include "fe.h"
 #include "sc.h"
 #include "crypto_additions.h"
diff --git a/src/curve25519/ed25519/ge_scalarmult_base.c b/src/curve25519/ed25519/ge_scalarmult_base.c
index 421e4fa..cca93e1 100644
--- a/src/curve25519/ed25519/ge_scalarmult_base.c
+++ b/src/curve25519/ed25519/ge_scalarmult_base.c
@@ -31,7 +31,7 @@ static ge_precomp base[32][8] = {
 #include "base.h"
 } ;
 
-static void select(ge_precomp *t,int pos,signed char b)
+static void select_precomp(ge_precomp *t,int pos,signed char b)
 {
   ge_precomp minust;
   unsigned char bnegative = negative(b);
@@ -89,7 +89,7 @@ void ge_scalarmult_base(ge_p3 *h,const unsigned char *a)
 
   ge_p3_0(h);
   for (i = 1;i < 64;i += 2) {
-    select(&t,i / 2,e[i]);
+    select_precomp(&t,i / 2,e[i]);
     ge_madd(&r,h,&t); ge_p1p1_to_p3(h,&r);
   }
 
@@ -99,7 +99,7 @@ void ge_scalarmult_base(ge_p3 *h,const unsigned char *a)
   ge_p2_dbl(&r,&s); ge_p1p1_to_p3(h,&r);
 
   for (i = 0;i < 64;i += 2) {
-    select(&t,i / 2,e[i]);
+    select_precomp(&t,i / 2,e[i]);
     ge_madd(&r,h,&t); ge_p1p1_to_p3(h,&r);
   }
 }
diff --git a/src/curve25519/ed25519/nacl_sha512/blocks.c b/src/curve25519/ed25519/nacl_sha512/blocks.c
index 1c5f23d..ab4ea37 100644
--- a/src/curve25519/ed25519/nacl_sha512/blocks.c
+++ b/src/curve25519/ed25519/nacl_sha512/blocks.c
@@ -236,3 +236,4 @@ int crypto_hashblocks_sha512(unsigned char *statebytes,const unsigned char *in,u
 
   return 0;
 }
+#undef F
diff --git a/src/curve25519/ed25519/sc_muladd.c b/src/curve25519/ed25519/sc_muladd.c
index 6f1e9d0..310cb26 100644
--- a/src/curve25519/ed25519/sc_muladd.c
+++ b/src/curve25519/ed25519/sc_muladd.c
@@ -3,25 +3,6 @@
 #include "crypto_uint32.h"
 #include "crypto_uint64.h"
 
-static crypto_uint64 load_3(const unsigned char *in)
-{
-  crypto_uint64 result;
-  result = (crypto_uint64) in[0];
-  result |= ((crypto_uint64) in[1]) << 8;
-  result |= ((crypto_uint64) in[2]) << 16;
-  return result;
-}
-
-static crypto_uint64 load_4(const unsigned char *in)
-{
-  crypto_uint64 result;
-  result = (crypto_uint64) in[0];
-  result |= ((crypto_uint64) in[1]) << 8;
-  result |= ((crypto_uint64) in[2]) << 16;
-  result |= ((crypto_uint64) in[3]) << 24;
-  return result;
-}
-
 /*
 Input:
   a[0]+256*a[1]+...+256^31*a[31] = a
diff --git a/src/curve25519/ed25519/sc_reduce.c b/src/curve25519/ed25519/sc_reduce.c
index d01f5a5..0fc92df 100644
--- a/src/curve25519/ed25519/sc_reduce.c
+++ b/src/curve25519/ed25519/sc_reduce.c
@@ -3,25 +3,6 @@
 #include "crypto_uint32.h"
 #include "crypto_uint64.h"
 
-static crypto_uint64 load_3(const unsigned char *in)
-{
-  crypto_uint64 result;
-  result = (crypto_uint64) in[0];
-  result |= ((crypto_uint64) in[1]) << 8;
-  result |= ((crypto_uint64) in[2]) << 16;
-  return result;
-}
-
-static crypto_uint64 load_4(const unsigned char *in)
-{
-  crypto_uint64 result;
-  result = (crypto_uint64) in[0];
-  result |= ((crypto_uint64) in[1]) << 8;
-  result |= ((crypto_uint64) in[2]) << 16;
-  result |= ((crypto_uint64) in[3]) << 24;
-  return result;
-}
-
 /*
 Input:
   s[0]+256*s[1]+...+256^63*s[63] = s
